{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/blog_post.service.ts","webpack:///./src/app/user.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,mB;;;;;;;;;;;ACAA,6ZAA6Z,SAAS,4RAA4R,SAAS,+IAA+I,8HAA8H,SAAS,kNAAkN,yBAAyB,4CAA4C,8BAA8B,0HAA0H,6GAA6G,ozBAAozB,aAAa,mJAAmJ,aAAa,mEAAmE,aAAa,oD;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA9/E;AACI;AACT;AACX,CAAE,mBAAmB;AAOrD;IAiBE,sBAAoB,gBAAiC,EAAU,YAAyB;QAApE,qBAAgB,GAAhB,gBAAgB,CAAiB;QAAU,iBAAY,GAAZ,YAAY,CAAa;IAAI,CAAC;IAE7F,+BAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG;YACV,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,EAAE;SACb,CAAC;IACJ,CAAC;IAED,4BAAK,GAAL;QACE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAC,CAAC,CAAC;IAC5F,CAAC;IAED,mCAAY,GAAZ;QACE,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IACnC,CAAC;IAED,6BAAM,GAAN;QACE,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC;IAED,+BAAQ,GAAR;QAAA,iBAeC;QAdC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,SAAS;QACpC,yDAAyD;QACzD,cAAI;YACF,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,qCAAqC;YACrC,GAAG,CAAC,CAAa,UAAU,EAAV,UAAI,CAAC,KAAK,EAAV,cAAU,EAAV,IAAU;gBAAtB,IAAI,IAAI;gBACX,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACjC;QACH,CAAC;QACD,wDAAwD;QACxD,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB;QACzB,4DAA4D;QAC5D,cAAM,cAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAjC,CAAiC,CACxC,CAAC;IACJ,CAAC;IAED,iCAAU,GAAV;QAAA,iBAYC;QAXC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CACnE,cAAI;YACF,mBAAmB;YACnB,KAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,EACD,eAAK;YACH,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAC/B,MAAM,CAAC,uDAAU,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC,CACH,CAAC;IACJ,CAAC;IArEU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAkBsC,kEAAe,EAAwB,yDAAW;OAjB7E,YAAY,CAuExB;IAAD,mBAAC;CAAA;AAvEwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACViC;AACjB;AACe;AACX;AAEE;AACO;AACT;AAY7C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAVrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa,EAAE,0DAAW,EAAE,qEAAgB;aAC7C;YACD,SAAS,EAAE,CAAC,kEAAe,EAAE,yDAAW,CAAC;YACzC,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBmB;AACoB;AAClB;AAG3C;IAEE,yBAAoB,IAAgB,EAAU,YAAyB;QAAnD,SAAI,GAAJ,IAAI,CAAY;QAAU,iBAAY,GAAZ,YAAY,CAAa;IACvE,CAAC;IAED,0DAA0D;IAC1D,8BAAI,GAAJ;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACrC,CAAC;IAED,6DAA6D;IAC7D,gCAAM,GAAN,UAAO,IAAI,EAAE,KAAK;QAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IACnF,CAAC;IAED,4CAA4C;IAC5C,wCAAc,GAAd;QACE,MAAM,CAAC;YACL,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK;aAClD,CAAC;SACH,CAAC;IACJ,CAAC;IAvBU,eAAe;QAD3B,gEAAU,EAAE;yCAGe,+DAAU,EAAwB,yDAAW;OAF5D,eAAe,CAyB3B;IAAD,sBAAC;CAAA;AAzB2B;;;;;;;;;;;;;;;;;;;;;;;;;;ACLa;AACoB;AAG7D;IAiBE,qBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAHpC,iDAAiD;QAC1C,WAAM,GAAQ,EAAE,CAAC;QAGtB,IAAI,CAAC,WAAW,GAAG;YACjB,OAAO,EAAE,IAAI,gEAAW,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC;SAC/D,CAAC;IACJ,CAAC;IAED,8EAA8E;IACvE,2BAAK,GAAZ,UAAa,IAAI;QAAjB,iBAWC;QAVC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAClF,cAAI;YACF,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YACnC,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACjC,CAAC,EACD,aAAG;YACD,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;YAClC,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,kCAAY,GAAnB;QAAA,iBAWC;QAVC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CACpG,cAAI;YACF,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;YACrC,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACjC,CAAC,EACD,aAAG;YACD,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;YACpC,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CACF,CAAC;IACJ,CAAC;IAEM,4BAAM,GAAb;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAEO,gCAAU,GAAlB,UAAmB,KAAK;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAEjB,iEAAiE;QACjE,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,aAAa,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;QACxD,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC;IACzC,CAAC;IApEU,WAAW;QADvB,gEAAU,EAAE;yCAkBe,+DAAU;OAjBzB,WAAW,CAsEvB;IAAD,kBAAC;CAAA;AAtEuB;;;;;;;;;;;;;ACJxB;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"card p-4\\\" *ngIf=\\\"!_userService.token\\\">\\r\\n\\t<h2 class=\\\"text-decoration-underline\\\">Log In</h2>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-sm-2\\\">\\r\\n\\t\\t\\t<label>Username:</label><br />\\r\\n\\t\\t\\t<input type=\\\"text\\\" name=\\\"login-username\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"user.username\\\" />\\r\\n\\t\\t\\t<span *ngFor=\\\"let error of _userService.errors.username\\\"><br />{{ error }}</span>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-sm-2\\\">\\r\\n\\t\\t\\t<label>Password:</label><br />\\r\\n\\t\\t\\t<input type=\\\"password\\\" name=\\\"login-password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"user.password\\\" />\\r\\n\\t\\t\\t<span *ngFor=\\\"let error of _userService.errors.password\\\"><br />{{ error }}</span>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-sm-2\\\">\\r\\n\\t\\t\\t<button (click)=\\\"login()\\\" class=\\\"btn btn-primary mt-3\\\">Log In</button>&nbsp;\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-sm-12\\\">\\r\\n\\t\\t\\t<span *ngFor=\\\"let error of _userService.errors.non_field_errors\\\">{{ error }}<br /></span>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"card p-3\\\" *ngIf=\\\"_userService.token\\\">\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-sm-12\\\">\\r\\n\\t\\t\\tYou are logged in as: <strong>{{ _userService.username }}</strong> .<br />\\r\\n\\t\\t\\tToken Expires: {{ _userService.token_expires }}<br />\\r\\n\\t\\t\\t<button (click)=\\\"refreshToken()\\\" class=\\\"btn btn-primary mt-2\\\">\\r\\n\\t\\t\\t\\tRefresh Token</button>&nbsp;\\r\\n\\t\\t\\t<button (click)=\\\"logout()\\\" class=\\\"btn btn-primary font-weight-bold mt-2\\\">Log Out</button>&nbsp;\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n<hr>\\r\\n\\r\\n<div class=\\\"card p-3\\\">\\r\\n\\t<h3 class=\\\"text-decoration-underline\\\">Create A New Post:</h3>\\r\\n\\t<label>Enter your post:</label>\\r\\n\\t<div class=\\\"input-group w-50 text-center\\\">\\r\\n\\t\\t<input type=\\\"text\\\" name=\\\"body\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"new_post.body\\\" required/>\\r\\n\\t\\t<div class=\\\"input-group-append\\\">\\r\\n\\t\\t\\t<button (click)=\\\"createPost()\\\" class=\\\"btn btn-primary font-weight-bold\\\">Create</button>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n<hr>\\r\\n\\r\\n<div class=\\\"card p-3\\\">\\r\\n\\t<h2 class=\\\"mt-3 text-decoration-underline\\\">Micro Blog Posts</h2>\\r\\n\\t<div *ngFor=\\\"let post of posts\\\">\\r\\n\\t\\t<div class=\\\"card p-4\\\">\\r\\n\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"col-md-4\\\">\\r\\n\\t\\t\\t\\t\\tBy: <strong class=\\\"text-capitalize\\\">{{ post.user }}</strong>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div class=\\\"col-md-4\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"col-md-4\\\">\\r\\n\\t\\t\\t\\t<strong>Date:</strong>&nbsp;{{ post.date }}\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<span class=\\\"mt-3\\\">{{ post.body }}</span>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n\\r\\n\"","import {Component, OnInit} from '@angular/core';\r\nimport {BlogPostService} from './blog_post.service';\r\nimport {UserService} from './user.service';\r\nimport {throwError} from 'rxjs';  // Angular 6/RxJS 6\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  /**\r\n   * An object representing the user for the login form\r\n   */\r\n  public user: any;\r\n\r\n  /**\r\n   * An array of all the BlogPost objects from the API\r\n   */\r\n  public posts;\r\n\r\n  /**\r\n   * An object representing the data in the \"add\" form\r\n   */\r\n  public new_post: any;\r\n\r\n  constructor(private _blogPostService: BlogPostService, private _userService: UserService) { }\r\n\r\n  ngOnInit() {\r\n    this.getPosts();\r\n    this.new_post = {};\r\n    this.user = {\r\n      username: '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  login() {\r\n    this._userService.login({'username': this.user.username, 'password': this.user.password});\r\n  }\r\n\r\n  refreshToken() {\r\n    this._userService.refreshToken();\r\n  }\r\n\r\n  logout() {\r\n    this._userService.logout();\r\n  }\r\n\r\n  getPosts() {\r\n    this._blogPostService.list().subscribe(\r\n      // the first argument is a function which runs on success\r\n      data => {\r\n        this.posts = data;\r\n        // convert the dates to a nice format\r\n        for (let post of this.posts) {\r\n          post.date = new Date(post.date);         \r\n        }\r\n      },\r\n      // the second argument is a function which runs on error\r\n      err => console.error(err),\r\n      // the third argument is a function which runs on completion\r\n      () => console.log('done loading posts')\r\n    );\r\n  }\r\n\r\n  createPost() {\r\n    this._blogPostService.create(this.new_post, this.user.token).subscribe(\r\n       data => {\r\n         // refresh the list\r\n         this.getPosts();\r\n         return true;\r\n       },\r\n       error => {\r\n         console.error('Error saving!');\r\n         return throwError(error);\r\n       }\r\n    );\r\n  }\r\n\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { BlogPostService } from './blog_post.service';\r\nimport { UserService } from './user.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule, FormsModule, HttpClientModule\r\n  ],\r\n  providers: [BlogPostService, UserService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {UserService} from './user.service';\r\n\r\n@Injectable()\r\nexport class BlogPostService {\r\n\r\n  constructor(private http: HttpClient, private _userService: UserService) {\r\n  }\r\n\r\n  // Uses http.get() to load data from a single API endpoint\r\n  list() {\r\n    return this.http.get('/api/posts');\r\n  }\r\n\r\n  // send a POST request to the API to create a new data object\r\n  create(post, token) {\r\n    return this.http.post('/api/posts', JSON.stringify(post), this.getHttpOptions());\r\n  }\r\n\r\n  // helper function to build the HTTP headers\r\n  getHttpOptions() {\r\n    return {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'JWT ' + this._userService.token\r\n      })\r\n    };\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n  // http options used for making API calls\r\n  private httpOptions: any;\r\n\r\n  // the actual JWT token\r\n  public token: string;\r\n\r\n  // the token expiration date\r\n  public token_expires: Date;\r\n\r\n  // the username of the logged in user\r\n  public username: string;\r\n\r\n  // error messages received from the login attempt\r\n  public errors: any = [];\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n    };\r\n  }\r\n\r\n  // Uses http.post() to get an auth token from djangorestframework-jwt endpoint\r\n  public login(user) {\r\n    this.http.post('/api-token-auth/', JSON.stringify(user), this.httpOptions).subscribe(\r\n      data => {\r\n        console.log('login success', data);\r\n        this.updateData(data['token']);\r\n      },\r\n      err => {\r\n        console.error('login error', err);\r\n        this.errors = err['error'];\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Refreshes the JWT token, to extend the time the user is logged in\r\n   */\r\n  public refreshToken() {\r\n    this.http.post('/api-token-refresh/', JSON.stringify({token: this.token}), this.httpOptions).subscribe(\r\n      data => {\r\n        console.log('refresh success', data);\r\n        this.updateData(data['token']);\r\n      },\r\n      err => {\r\n        console.error('refresh error', err);\r\n        this.errors = err['error'];\r\n      }\r\n    );\r\n  }\r\n\r\n  public logout() {\r\n    this.token = null;\r\n    this.token_expires = null;\r\n    this.username = null;\r\n  }\r\n\r\n  private updateData(token) {\r\n    this.token = token;\r\n    this.errors = [];\r\n\r\n    // decode the token to read the username and expiration timestamp\r\n    const token_parts = this.token.split(/\\./);\r\n    const token_decoded = JSON.parse(window.atob(token_parts[1]));\r\n    this.token_expires = new Date(token_decoded.exp * 1000);\r\n    this.username = token_decoded.username;\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}